version: '3.8'

services:
  # TimescaleDB for time-series cost data
  timescaledb:
    image: timescale/timescaledb:2.8.0-pg14
    container_name: cost-optimizer-db
    environment:
      POSTGRES_DB: cost_optimizer
      POSTGRES_USER: demouser
      POSTGRES_PASSWORD: demopass123
      TIMESCALEDB_TELEMETRY: 'off'
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U demouser -d cost_optimizer"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cost-optimizer

  # Redis for caching and task queue
  redis:
    image: redis:6.2.6-alpine
    container_name: cost-optimizer-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - cost-optimizer

  # FastAPI backend service
  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: cost-optimizer-api
    environment:
      - DATABASE_URL=postgresql://demouser:demopass123@timescaledb:5432/cost_optimizer
      - REDIS_URL=redis://redis:6379/0
      - API_KEY=demo-key-sk-cloudcost123456
      - SECRET_KEY=demo-secret-hybrid-cloud-optimizer-2024
      - ENVIRONMENT=demo
      - LOG_LEVEL=INFO
    ports:
      - "8080:8080"
    volumes:
      - ./data:/app/data
      - ./ml/models:/app/models
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cost-optimizer

  # Celery worker for background tasks
  worker:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: cost-optimizer-worker
    command: celery -A main.celery worker --loglevel=info --concurrency=2
    environment:
      - DATABASE_URL=postgresql://demouser:demopass123@timescaledb:5432/cost_optimizer
      - REDIS_URL=redis://redis:6379/0
      - API_KEY=demo-key-sk-cloudcost123456
      - SECRET_KEY=demo-secret-hybrid-cloud-optimizer-2024
      - ENVIRONMENT=demo
    volumes:
      - ./data:/app/data
      - ./ml/models:/app/models
    depends_on:
      - timescaledb
      - redis
      - api
    networks:
      - cost-optimizer

  # Celery beat scheduler
  scheduler:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: cost-optimizer-scheduler
    command: celery -A main.celery beat --loglevel=info --schedule=/tmp/celerybeat-schedule
    environment:
      - DATABASE_URL=postgresql://demouser:demopass123@timescaledb:5432/cost_optimizer
      - REDIS_URL=redis://redis:6379/0
      - API_KEY=demo-key-sk-cloudcost123456
      - SECRET_KEY=demo-secret-hybrid-cloud-optimizer-2024
      - ENVIRONMENT=demo
    volumes:
      - ./data:/app/data
      - ./ml/models:/app/models
    depends_on:
      - timescaledb
      - redis
      - api
    networks:
      - cost-optimizer

  # React frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cost-optimizer-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8080
      - REACT_APP_API_KEY=demo-key-sk-cloudcost123456
      - REACT_APP_ENVIRONMENT=demo
    depends_on:
      - api
    networks:
      - cost-optimizer

  # Prometheus metrics collection
  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: cost-optimizer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts:/etc/prometheus/alerts
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - cost-optimizer

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:9.0.0
    container_name: cost-optimizer-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=demouser
      - GF_SECURITY_ADMIN_PASSWORD=demopass123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - cost-optimizer

  # Nginx reverse proxy
  nginx:
    image: nginx:1.22.0-alpine
    container_name: cost-optimizer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    networks:
      - cost-optimizer

  # Data initialization service
  data-init:
    build: 
      context: ./data-init
      dockerfile: Dockerfile
    container_name: cost-optimizer-data-init
    environment:
      - DATABASE_URL=postgresql://demouser:demopass123@timescaledb:5432/cost_optimizer
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cost-optimizer
    restart: "no"

networks:
  cost-optimizer:
    driver: bridge

volumes:
  timescale_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local