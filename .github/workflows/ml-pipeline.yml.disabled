# Cloud Cost Optimizer ML Pipeline
# Disabled to prevent resource consumption - remove .disabled suffix to activate

name: ML Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  data-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy scikit-learn prophet pytest great-expectations
        pip install -r api/requirements.txt
    
    - name: Data Quality Validation
      run: |
        python -c "
        import pandas as pd
        import numpy as np
        from ml.cost_predictor import CostPredictor
        
        # Validate sample data structure
        df = pd.read_csv('data/sample_costs.csv')
        assert not df.empty, 'Sample data cannot be empty'
        assert 'date' in df.columns, 'Date column required'
        assert 'cost' in df.columns, 'Cost column required'
        print(f'Data validation passed: {len(df)} records')
        "
    
    - name: Model Training Test
      run: |
        python -c "
        from ml.cost_predictor import CostPredictor
        from ml.optimizer import CostOptimizer
        
        # Test model initialization and basic functionality
        predictor = CostPredictor()
        optimizer = CostOptimizer()
        print('Model components loaded successfully')
        "
    
    - name: Run ML Tests
      run: |
        pytest tests/test_cost_predictor.py -v
        pytest tests/test_optimizer.py -v

  performance-test:
    runs-on: ubuntu-latest
    needs: data-validation
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: cost_optimizer_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt
        pip install locust pytest-benchmark
    
    - name: API Performance Test
      run: |
        cd api
        python -c "
        from main import app
        from fastapi.testclient import TestClient
        import time
        
        client = TestClient(app)
        
        # Performance benchmark
        start_time = time.time()
        response = client.get('/health')
        end_time = time.time()
        
        assert response.status_code == 200
        response_time = (end_time - start_time) * 1000
        print(f'Health endpoint response time: {response_time:.2f}ms')
        assert response_time < 100, f'Response time too slow: {response_time}ms'
        "
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost/cost_optimizer_test

  docker-build:
    runs-on: ubuntu-latest
    needs: [data-validation, performance-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build API Docker image
      run: |
        docker build -t cost-optimizer-api:test -f api/Dockerfile .
        docker run --rm cost-optimizer-api:test python -c "from main import app; print('API import test passed')"
    
    - name: Build Frontend Docker image
      run: |
        docker build -t cost-optimizer-frontend:test -f frontend/Dockerfile .
        echo "Frontend Docker build completed successfully"